mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
```
You have some variables in your workspace or environment like 'cond' and
efficient. You want to be careful that you don't bring in too much data
into R at once since R will hold all the data in working memory. We have nothing to worry about here, but let's delete those variables from the
work space.
```{r}
rm(cond)
rm(efficient)
```
Save this file if you haven't done so yet.
You'll have the opportunity to create an Rmd file for the final project in
this class and submit the the Rmd file and html file. You'll need the
knitr package to do that so let's install that now. Run these two lines
of code.
```{r}
install.packages('knitr', dependencies = T)
library(knitr)
```
When you click the **Knit HTML** button a web page will be generated that
includes both content (text and text formatting from Markdown) as well as
the output of any embedded R code chunks within the document.
You've reached the end of the file so now it's time to write some code to
answer a question to continue on in Lesson 2.
Which car(s) have an mpg (miles per gallon) greater than or equal to 30
OR hp (horsepower) less than 60? Create an R chunk of code to answer the question.
Once you have the answer, go the [Udacity website](https://www.udacity.com/course/viewer#!/c-ud651/l-729069797/e-804129319/m-811719066) to continue with Lesson 2.
Note: You use brackets around text followed by two parentheses to create a link. There must be no spaces between the brackets and the parentheses. Paste or type the link into the parentheses. This also works on the discussions!
And if you want to see all of your HARD WORK from this file, click
the **KNIT HTML** button now. (You may or may not need to restart R).
# CONGRATULATIONS
#### You'll be exploring data soon with your new knowledge of R.
mystery
source('~/Downloads/EDA_Course_Materials/lesson2/demystifying.R')
mtcars
mean(mtcars$mpg)
hiddenMDS = cmdscale(distanceMatrix)
plot(hiddenMDS,
main = 'MDS: hidden layer neural representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-2.8,2.8), ylim = c(-2.8,2.8))
text(hiddenMDS,labels = row.names(hiddenData))
# 2D MDS
hiddenMDS = cmdscale(distanceMatrix)
plot(hiddenMDS,
main = 'MDS: hidden layer neuraln\ representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-2.8,2.8), ylim = c(-2.8,2.8))
text(hiddenMDS,labels = row.names(hiddenData))
hiddenMDS = cmdscale(distanceMatrix)
plot(hiddenMDS,
main = 'MDS: hidden layer neural\n representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-2.8,2.8), ylim = c(-2.8,2.8))
text(hiddenMDS,labels = row.names(hiddenData))
hiddenMDS = cmdscale(distanceMatrix)
range = 3;
plot(hiddenMDS,
main = 'MDS: hidden layer neural\n representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-range,range), ylim = c(-range,range))
text(hiddenMDS,labels = row.names(hiddenData))
plot.new()
par(mfrow = c(1,1))
plot(hclust(dist(hiddenData)),
main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
xlab = 'instances', ylab = 'distance')
par(mfrow(2,1))
par(mfrow = c(2,1))
par(mfrow = c(2,1))
plot.new()
par(mfrow = c(1,1))
plot(hclust(dist(hiddenData)),
main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
xlab = 'instances', ylab = 'distance')
# 2D MDS
hiddenMDS = cmdscale(distanceMatrix)
range = 3;
plot(hiddenMDS,
main = 'MDS: hidden layer neural\n representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-range,range), ylim = c(-range,range))
text(hiddenMDS,labels = row.names(hiddenData))
par(mfrow = c(2,1))
# plot.new()
par(mfrow = c(1,1))
plot(hclust(dist(hiddenData)),
main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
xlab = 'instances', ylab = 'distance')
# 2D MDS
hiddenMDS = cmdscale(distanceMatrix)
range = 3;
plot(hiddenMDS,
main = 'MDS: hidden layer neural\n representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-range,range), ylim = c(-range,range))
text(hiddenMDS,labels = row.names(hiddenData))
par(mfrow = c(2,1))
# plot.new()
par(mfrow = c(1,1))
plot(hclust(dist(hiddenData)),
main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
xlab = 'instances', ylab = 'distance')
par(mfrow = c(2,1))
# plot.new()
# par(mfrow = c(1,1))
plot(hclust(dist(hiddenData)),
main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
xlab = 'instances', ylab = 'distance')
# 2D MDS
hiddenMDS = cmdscale(distanceMatrix)
range = 3;
plot(hiddenMDS,
main = 'MDS: hidden layer neural\n representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-range,range), ylim = c(-range,range))
text(hiddenMDS,labels = row.names(hiddenData))
par(mfrow = c(1,2))
# plot.new()
# par(mfrow = c(1,1))
plot(hclust(dist(hiddenData)),
main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
xlab = 'instances', ylab = 'distance')
# 2D MDS
hiddenMDS = cmdscale(distanceMatrix)
range = 3;
plot(hiddenMDS,
main = 'MDS: hidden layer neural\n representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-range,range), ylim = c(-range,range))
text(hiddenMDS,labels = row.names(hiddenData))
hiddenMDS
max(hiddenMDS)
min(hiddenMDS)
max(max(hiddenMDS), abs(min(hiddenMDS)))
max(abs(hiddenMDS))
hiddenMDS = cmdscale(distanceMatrix)
# check the range
range = max(abs(hiddenMDS));
plot(hiddenMDS,
main = 'MDS: hidden layer neural\n representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-range,range), ylim = c(-range,range))
text(hiddenMDS,labels = row.names(hiddenData))
plot.new()
# hclust
par(mfrow = c(1,2))
# par(mfrow = c(1,1))
plot(hclust(dist(hiddenData)),
main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
xlab = 'instances', ylab = 'distance')
# 2D MDS
hiddenMDS = cmdscale(distanceMatrix)
# check the range
range = max(abs(hiddenMDS));
plot(hiddenMDS,
main = 'MDS: hidden layer neural\n representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-range,range), ylim = c(-range,range))
text(hiddenMDS,labels = row.names(hiddenData))
plot.new()
# hclust
par(mfrow = c(1,2))
# par(mfrow = c(1,1))
plot(hclust(dist(hiddenData)),
main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
xlab = 'instances', ylab = 'distance')
# 2D MDS
hiddenMDS = cmdscale(distanceMatrix)
# check the range
range = max(abs(hiddenMDS));
plot(hiddenMDS,
main = 'MDS: hidden layer neural\n representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-range,range), ylim = c(-range,range))
text(hiddenMDS,labels = row.names(hiddenData))
rm(list = ls())
PROJECT_DIR = '/Users/Qihong/Dropbox/github/PDPmodel_Categorization'
# you need to enter the file name and folder name here!
DATA_FOLDER = 'sim16_large'
FILENAME = 'hiddenFinal_e3.txt'
# load the data
datapath = paste(PROJECT_DIR, DATA_FOLDER, FILENAME, sep="/")
temp = read.table(datapath)
rm(list = ls())
PROJECT_DIR = '/Users/Qihong/Dropbox/github/PDPmodel_Categorization'
# you need to enter the file name and folder name here!
DATA_FOLDER = 'sim16_large'
FILENAME = 'hiddenFinal_e3.txt'
# load the data
datapath = paste(PROJECT_DIR, DATA_FOLDER, FILENAME, sep="/")
temp = read.table(datapath)
head(temp)
USArrests
distUSArrests
dist(USArrests)
hclust(dist(USArrests))
plot(hclust(dist(USArrests)))
hc <- hclust(dist(hiddenData), "ave")
ggdendrogram(hc, rotate = FALSE, size = 2)
rm(list = ls())
library(ggplot2)
library(ggdendro)
PROJECT_DIR = '/Users/Qihong/Dropbox/github/PDPmodel_Categorization'
# you need to enter the file name and folder name here!
DATA_FOLDER = 'sim16_large'
FILENAME = 'hiddenFinal_e3.txt'
# load the data
datapath = paste(PROJECT_DIR, DATA_FOLDER, FILENAME, sep="/")
temp = read.table(datapath)
# set some parameters
n = length(temp)
numPatterns = dim(temp)[1]
# convert the hidden activation to a matrix
hiddenData = as.matrix(temp[1:numPatterns,4:n])
temp = as.vector(temp[1:numPatterns,2])
temp = sapply(strsplit(temp, split='l', fixed=TRUE), function(x) (x[2]))
row.names(hiddenData) = temp
# Analysis for full data (verbal + visual)
# compute the dissimilarity structure
plot.new()
par(mfrow = c(1,1))
distanceMatrix = (as.matrix(dist(hiddenData)))
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# mtext(row.names(hiddenData))
plot.new()
lowerTriangularIndices = lower.tri(distanceMatrix)
range (distanceMatrix[lowerTriangularIndices])
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# hclust
par(mfrow = c(1,2))
# par(mfrow = c(1,1))
# plot(hclust(dist(hiddenData)),
#      main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
#      xlab = 'instances', ylab = 'distance')
hc <- hclust(dist(hiddenData), "ave")
ggdendrogram(hc, rotate = FALSE, size = 2)
install.packages(ggdendro)
install.packages('ggdendro')
library(ggdendro)
hc <- hclust(dist(hiddenData), "ave")
ggdendrogram(hc, rotate = FALSE, size = 2)
hc <- hclust(dist(hiddenData), "ave")
dhc <- as.dendrogram(hc)
# Rectangular lines
ddata <- dendro_data(dhc, type = "rectangle")
p <- ggplot(segment(ddata)) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
coord_flip() +
scale_y_reverse(expand = c(0.2, 0))
p
hc <- hclust(dist(hiddenData), "ave", type = "rectangle")
ggdendrogram(hc, rotate = FALSE, size = 2)
hc <- hclust(dist(hiddenData), "ave")
dhc <- as.dendrogram(hc)
hc <- hclust(dist(hiddenData), "ave", type = "rectangle")
ggdendrogram(hc, rotate = FALSE, size = 2)
hc <- hclust(dist(hiddenData), "ave", type = "rectangle")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Plant growth with\ndifferent treatments")
hc <- hclust(dist(hiddenData), "ave", type = "rectangle")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
par(mfrow = c(1,2))
hc <- hclust(dist(hiddenData), "ave", type = "rectangle")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
hiddenMDS = cmdscale(distanceMatrix)
# check the range
range = max(abs(hiddenMDS));
plot(hiddenMDS,
main = 'MDS: hidden layer neural\n representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-range,range), ylim = c(-range,range))
text(hiddenMDS,labels = row.names(hiddenData))
par(mfrow = c(1,1))
hc <- hclust(dist(hiddenData), "ave", type = "rectangle")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
install.packages('vegan')
library(vegan)  #load the vegan package
install.packages('permute')
install.packages("permute")
library('vegan')
install.packages('lattice')
install.packages("lattice")
library(vegan)
plot(as.phylo(hc), cex = 0.9, label.offset = 1)
library(ape)
install.packages('ape')
library(ape)
plot(as.phylo(hc), cex = 0.9, label.offset = 1)
plot(as.phylo(hc), cex = 0.9, label.offset = 1)
plot(as.phylo(hc), cex = 0.4, label.offset = 1)
plot(as.phylo(hc), cex = 0.4, label.offset = 0.5)
plot(as.phylo(hc), cex = 0.4, label.offset = 0.1)
plot(as.phylo(hc), cex = 2, label.offset = 0.1)
plot(as.phylo(hc), cex = 0.4, label.offset = 0.1)
plot(as.phylo(hc), type = "unrooted")
plot(as.phylo(hc), type = "fan")
plot(as.phylo(hc), type = "unrooted")
# vector of colors
mypal = c("#556270", "#4ECDC4", "#1B676B", "#FF6B6B", "#C44D58")
# cutting dendrogram in 5 clusters
clus5 = cutree(hc, 5)
# plot
op = par(bg = "#E8DDCB")
# Size reflects miles per gallon
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5], label.offset = 1,
cex = log(mtcars$mpg, 10), col = "red")
# 2D MDS
# vector of colors
mypal = c("#556270", "#4ECDC4", "#1B676B", "#FF6B6B", "#C44D58")
# cutting dendrogram in 5 clusters
clus5 = cutree(hc, 3)
# plot
op = par(bg = "#E8DDCB")
# Size reflects miles per gallon
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5], label.offset = 1,
cex = log(mtcars$mpg, 10), col = "red")
mypal = c("#556270", "#4ECDC4", "#1B676B", "#FF6B6B", "#C44D58")
# cutting dendrogram in 5 clusters
clus5 = cutree(hc, 3)
# plot
op = par(bg = "#E8DDCB")
# Size reflects miles per gallon
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5], label.offset = 1,
col = "red")
clus5 = cutree(hc, 3)
# plot
op = par(bg = "#E8DDCB")
# Size reflects miles per gallon
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5], label.offset = 0.5,
col = "red")
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5], label.offset = 0.4,
col = "red")
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5], label.offset = 0.2,
col = "red")
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5],
col = "red")
# vector of colors
mypal = c("#556270", "#4ECDC4", "#1B676B", "#FF6B6B", "#C44D58")
# cutting dendrogram in 5 clusters
clus5 = cutree(hc, 5)
# plot
op = par(bg = "#E8DDCB")
# Size reflects miles per gallon
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5],
col = "red")
# vector of colors
mypal = c("#556270", "#4ECDC4", "#1B676B", "#FF6B6B", "#C44D58")
# cutting dendrogram in 5 clusters
clus5 = cutree(hc, 3)
# plot
op = par(bg = "#E8DDCB")
# Size reflects miles per gallon
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5],
col = "red")
plot(as.phylo(hc), type = "fan",
col = "red")
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5],
)
mypal = c("#556270", "#4ECDC4", "#1B676B", "#FF6B6B", "#C44D58")
# cutting dendrogram in 5 clusters
clus5 = cutree(hc, 3)
# plot
# op = par(bg = "#E8DDCB")
# Size reflects miles per gallon
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5],
col = "red")
plot(as.phylo(hc), type = "fan")
mypal = c("#556270", "#4ECDC4", "#1B676B", "#FF6B6B", "#C44D58")
# cutting dendrogram in 5 clusters
clus5 = cutree(hc, 3)
# plot
# op = par(bg = "#E8DDCB")
# Size reflects miles per gallon
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5],
col = "red")
source("http://addictedtor.free.fr/packages/A2R/lastVersion/R/code.R")
# colored dendrogram
op = par(bg = "#EFEFEF")
A2Rplot(hc, k = 3, boxes = FALSE, col.up = "gray50", col.down = c("#FF6B6B",
"#4ECDC4", "#556270"))
hc <- hclust(dist(hiddenData), "ave", type = "rectangle")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
hc <- hclust(dist(hiddenData), "ave", type = "rectangle")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
rm(list = ls())
library(ggplot2)
library(ggdendro)
PROJECT_DIR = '/Users/Qihong/Dropbox/github/PDPmodel_Categorization'
# you need to enter the file name and folder name here!
DATA_FOLDER = 'sim16_large'
FILENAME = 'hiddenFinal_e3.txt'
# load the data
datapath = paste(PROJECT_DIR, DATA_FOLDER, FILENAME, sep="/")
temp = read.table(datapath)
# set some parameters
n = length(temp)
numPatterns = dim(temp)[1]
# convert the hidden activation to a matrix
hiddenData = as.matrix(temp[1:numPatterns,4:n])
temp = as.vector(temp[1:numPatterns,2])
temp = sapply(strsplit(temp, split='l', fixed=TRUE), function(x) (x[2]))
row.names(hiddenData) = temp
# Analysis for full data (verbal + visual)
# compute the dissimilarity structure
plot.new()
par(mfrow = c(1,1))
distanceMatrix = (as.matrix(dist(hiddenData)))
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# mtext(row.names(hiddenData))
plot.new()
lowerTriangularIndices = lower.tri(distanceMatrix)
range (distanceMatrix[lowerTriangularIndices])
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# hclust
hc <- hclust(dist(hiddenData), "ave", type = "rectangle")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
par(mfrow = c(1,1))
# plot(hclust(dist(hiddenData)),
#      main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
#      xlab = 'instances', ylab = 'distance')
hc <- hclust(dist(hiddenData), "ave", type = "rectangle")
hc <- hclust(dist(hiddenData), "ave")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
# load code of A2R function
source("http://addictedtor.free.fr/packages/A2R/lastVersion/R/code.R")
# colored dendrogram
op = par(bg = "#EFEFEF")
A2Rplot(hc, k = 3, boxes = FALSE, col.up = "gray50", col.down = c("#FF6B6B",
"#4ECDC4", "#556270"))
A2Rplot(hc, k = 3, boxes = FALSE, col.up = "gray50", col.down = c("#FF6B6B",
"#4ECDC4", "#556270"), offset = 0.4)
source("http://addictedtor.free.fr/packages/A2R/lastVersion/R/code.R")
# colored dendrogram
op = par(bg = "#EFEFEF")
A2Rplot(hc, k = 3, boxes = FALSE, col.up = "gray50", col.down = c("#FF6B6B",
"#4ECDC4", "#556270"), offset = 0.4)
op = par(bg = "#EFEFEF")
A2Rplot(hc, k = 3, boxes = FALSE, col.up = "gray50", col.down = c("#FF6B6B",
"#4ECDC4", "#556270"), offset = 0.1)
A2Rplot
? A2Rplot
?? A2Rplot
hc <- hclust(dist(hiddenData), "ave")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
plot(as.phylo(hc), type = "unrooted")
plot(as.phylo(hc), type = "fan")
hc <- hclust(dist(hiddenData), "ave")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
# 2D MDS
hiddenMDS = cmdscale(distanceMatrix)
# check the range
range = max(abs(hiddenMDS));
plot(hiddenMDS,
main = 'MDS: hidden layer neural\n representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-range,range), ylim = c(-range,range))
text(hiddenMDS,labels = row.names(hiddenData))
hc <- hclust(dist(hiddenData), "ave")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
rm(list = ls())
library(ggplot2)
library(ggdendro)
PROJECT_DIR = '/Users/Qihong/Dropbox/github/PDPmodel_Categorization'
# you need to enter the file name and folder name here!
DATA_FOLDER = 'sim16_large'
FILENAME = 'hiddenFinal_e3.txt'
# load the data
datapath = paste(PROJECT_DIR, DATA_FOLDER, FILENAME, sep="/")
temp = read.table(datapath)
# set some parameters
n = length(temp)
numPatterns = dim(temp)[1]
# convert the hidden activation to a matrix
hiddenData = as.matrix(temp[1:numPatterns,4:n])
temp = as.vector(temp[1:numPatterns,2])
temp = sapply(strsplit(temp, split='l', fixed=TRUE), function(x) (x[2]))
row.names(hiddenData) = temp
# Analysis for full data (verbal + visual)
# compute the dissimilarity structure
plot.new()
par(mfrow = c(1,1))
distanceMatrix = (as.matrix(dist(hiddenData)))
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# mtext(row.names(hiddenData))
plot.new()
lowerTriangularIndices = lower.tri(distanceMatrix)
range (distanceMatrix[lowerTriangularIndices])
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# hclust
# par(mfrow = c(1,2))
par(mfrow = c(1,1))
# plot(hclust(dist(hiddenData)),
#      main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
#      xlab = 'instances', ylab = 'distance')
hc <- hclust(dist(hiddenData), "ave")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
# 2D MDS
hiddenMDS = cmdscale(distanceMatrix)
# check the range
range = max(abs(hiddenMDS));
plot(hiddenMDS,
main = 'MDS: hidden layer neural\n representations for all instances',
xlab = 'distance', ylab = 'distance',type = 'n',
xlim = c(-range,range), ylim = c(-range,range))
text(hiddenMDS,labels = row.names(hiddenData))
