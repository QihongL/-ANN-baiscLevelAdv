1 + 2 + 2 + 4 + 8
17 / 5
1 + 4 + 4 + 16 + 64
89 / 5
(89 / 5) - (17/5)^2
(89 / 5) -(17/5)^2
(17/5)^2
3.4 ^ 2
4 + 2 + 2 + 2 + 2 + 4 + 4
.2 + .1 + .1 + .2 + .1 + .1 + .2
rexp(0)
rexp(1,1)
rexp(1,1)
rexp(1,1)
? rexp
rexp(10,0)
rexp(10,0.001)
rexp(10,0.001)
rexp(10,0.001)
rexp(10,0.001)
rexp(10,0.001)
rexp(10,0.001)
rexp(10,3)
rexp(10,3)
rexp(10,3)
rexp(10,3)
rexp(10,2)
rexp(10,2)
rexp(10,2)
rexp(10,1)
rexp(10,1)
rexp(10,1)
rexp(10,.5)
rexp(10,.5)
rexp(10,.5)
rexp(10,.5)
rexp(10,.2)
rexp(10,.2)
rexp(10,.2)
rexp(10,.2)
help xyplot
? xyplot
rnorm(100)
rnorm(100)
rnorm(20)
library(lattice)
xyplot(rnorm(20))
? xyplot
norm
? norm
? rnorm
pnorm(0,0,1)
pnorm(1.66,0,1)
pnorm(1.5,0,1)
pnorm(1.5,0,1) * 2
2 - pnorm(1.5,0,1) * 2
1 - pnorm(1.5,0,1)
eye(3)
A = matrix(0,1,1,1,0,1,1,1,0,3,3)
A = matrix(c(0,1,1,1,0,1,1,1,0), 3,3)
A
eigen(A)
x = rnorm(10)
x = rnorm(10,10)
x
summary(x)
help summary
help summary()
? summary()
?summary()
?summary
5500 - 3400
exit
q()
library(tree)
install.packages('tree')
library(tree)
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('helperFunctions/multiplot.R'); source('helperFunctions/se.R');
source('helperFunctions/genNameByCard.R')
# load data
mydata = read.csv('perfect.csv', header = F)
################################################################################################
################################## Preprocess the data #########################################
################################################################################################
# set the name (need to be revised when adding new variables!)
# numOverallData = 8;
maxNumItems = 7;
levels = c("one", "two", "three", "four", "five", "six", "seven")
names = c('teachModes', 'meanSteps', 'monoRate', 'compRate', 'correctCompRate',
'skipRate','stopEarlyRate', 'numDoubleTouch')
namesByCard = c('steps', 'CR', 'CCR', 'SR', 'SER', 'numErr', 'DT');
# start generate the labels
for (i in 1 : length(namesByCard)){
names = c(names, genNameByCard(namesByCard[i], maxNumItems))
}
# attach the labels to the data set
colnames(mydata) = names
# set the condition label (need to be revised when changing conditions!)
mydata$teachModes[mydata$teachModes == 0] = '1.Final Reward Only'
mydata$teachModes[mydata$teachModes == 1] = '2.Intermediate Reward Only'
mydata$teachModes[mydata$teachModes == 2] = '3.Demonstration Only'
mydata$teachModes[mydata$teachModes == 3] = '4.Intermediate Reward + Demonstration'
# convert correct rate to error rate
mydata$monoRate = 1 - mydata$monoRate
# set the font size
# theme_set(theme_gray(base_size = 20))
################################################################################################
################################## Performance Overall #########################################
################################################################################################
overallData = mydata[,1:numOverallData]
meanOverallData = ddply(overallData,~teachModes,summarise,ms=mean(meanSteps),mr=mean(monoRate),
cr=mean(compRate),ccr=mean(correctCompRate),sr=mean(skipRate),
ser = mean(stopEarlyRate), dt = mean(numDoubleTouch))
seOverallData = ddply(overallData,~teachModes,summarise,se_ms=se(meanSteps),se_mr=se(monoRate),
se_cr=se(compRate),se_ccr=se(correctCompRate),se_sr=se(skipRate),
se_ser = se(stopEarlyRate), se_dt = se(numDoubleTouch))
meanOverallData = data.frame(meanOverallData, seOverallData[,2:ncol(seOverallData)])
# do the plotting
limits = aes(ymax = ms + se_ms, ymin=ms - se_ms)
p1 = ggplot(meanOverallData, aes(x = teachModes, y = ms, fill=teachModes)) +
geom_bar(stat="identity") +
geom_errorbar(limits, width=0.15) +
labs(x = "Teaching mode", y = "Mean number of steps used") +
theme(axis.text.x = element_blank(),axis.ticks = element_blank(), legend.position="none")
limits = aes(ymax = cr + se_cr, ymin=cr - se_cr)
p2 = ggplot(meanOverallData, aes(x = teachModes, y = cr, fill=teachModes)) +
geom_bar(stat="identity") +
geom_errorbar(limits, width=0.15) +
labs(x = "Teaching mode", y = "Completion rate") +
theme(axis.text.x = element_blank(),axis.ticks = element_blank(), legend.position="none")
limits = aes(ymax = ccr + se_ccr, ymin=ccr - se_ccr)
p3 = ggplot(meanOverallData, aes(x = teachModes, y = ccr, fill=teachModes)) +
geom_bar(stat="identity") +
geom_errorbar(limits, width=0.15) +
labs(x = "Teaching mode", y = "Correct completion rate") +
theme(axis.text.x = element_blank(),axis.ticks = element_blank(), legend.position="none")
limits = aes(ymax = mr + se_mr, ymin=mr - se_mr)
p4 = ggplot(meanOverallData, aes(x = teachModes, y = mr, fill=teachModes)) +
geom_bar(stat="identity") +
geom_errorbar(limits, width=0.15) +
labs(x = "Teaching mode", y = "Order incorrect rate") +
theme(axis.text.x = element_blank(),axis.ticks = element_blank(), legend.position="none")
limits = aes(ymax = sr + se_sr, ymin=sr - se_sr)
p5 = ggplot(meanOverallData, aes(x = teachModes, y = sr, fill=teachModes)) +
geom_bar(stat="identity") +
geom_errorbar(limits, width=0.15) +
labs(x = "Teaching mode", y = "Skip rate") +
theme(axis.text.x = element_blank(),axis.ticks = element_blank(), legend.position="none")
limits = aes(ymax = ser + se_ser, ymin=ser - se_ser)
p6 = ggplot(meanOverallData, aes(x = teachModes, y = ser, fill=teachModes)) +
geom_bar(stat="identity") +
geom_errorbar(limits, width=0.15) +
labs(x = "Teaching mode", y = "Mean stop early rate") +
theme(axis.text.x = element_blank(),axis.ticks = element_blank(), legend.position="none")
limits = aes(ymax = dt + se_dt, ymin=dt - se_dt)
p7 = ggplot(meanOverallData, aes(x = teachModes, y = dt, fill=teachModes)) +
geom_bar(stat="identity") +
geom_errorbar(limits, width=0.15) +
labs(x = "Teaching mode", y = "Mean number of double touching") +
theme(axis.text.x = element_blank(),axis.ticks = element_blank(), legend.position="none")
# multiplot(p1, p2, p3, p4, p5, p6, p7, cols=3)
# cat ("Press [enter] to continue")
# line <- readline()
################################################################################################
################################## Performance by cardinality ##################################
################################################################################################
################################################################################################
# mean steps used by cardinality
################################################################################################
tempSelectVars <- c('teachModes',"steps1", "steps2", "steps3",
'steps4', 'steps5', 'steps6', 'steps7')
stepsData = mydata[tempSelectVars]
# compute mean by cardinality
meanStepsData = ddply(stepsData,~teachModes,summarise,one=mean(steps1),two=mean(steps2),
three=mean(steps3),four=mean(steps4),five=mean(steps5),six=mean(steps6),seven=mean(steps7))
seStepsData = ddply(stepsData,~teachModes,summarise,one=se(steps1),two=se(steps2),
three=se(steps3),four=se(steps4),five=se(steps5),six=se(steps6),seven=se(steps7))
# gather data by cardinality
meanStepsData = gather(meanStepsData, cardinality, meanSteps, one:seven)
seStepsData = gather(seStepsData, cardinality, seSteps, one:seven)
# attach the se to the end of the data frame
meanStepsData <- data.frame(meanStepsData, seStepsData$seSteps)
colnames(meanStepsData)[ncol(meanStepsData)] = 'seSteps'
limits = aes(ymax = meanSteps + seSteps, ymin=meanSteps - seSteps)
# create a factor variable
numOrder = factor(meanStepsData$cardinality, levels)
# do the plotting
p1 = ggplot(data=meanStepsData, aes(x=numOrder, y=meanSteps, group=teachModes, colour=teachModes)) +
geom_line(size = 1.25) + geom_point() + ylim(0, 100) +
geom_errorbar(limits, width=0.15) +
labs(x = "Number of items", y = "Mean number of steps used")
################################################################################################
# complete rate by cardinality
################################################################################################
tempSelectVars <- c('teachModes',"CR1", "CR2", "CR3",'CR4', 'CR5', 'CR6', 'CR7')
CRData = mydata[tempSelectVars]
# compute mean by cardinality
meanCRData = ddply(CRData,~teachModes,summarise,one=mean(CR1),two=mean(CR2),
three=mean(CR3),four=mean(CR4),five=mean(CR5),six=mean(CR6),seven=mean(CR7))
seCRData = ddply(CRData,~teachModes,summarise,one=se(CR1),two=se(CR2),
three=se(CR3),four=se(CR4),five=se(CR5),six=se(CR6),seven=se(CR7))
# gather data by cardinality
meanCRData = gather(meanCRData, cardinality, meanCR, one:seven)
seCRData = gather(seCRData, cardinality, seCR, one:seven)
# attach the se to the end of the data frame
meanCRData <- data.frame(meanCRData, seCRData$seCR)
colnames(meanCRData)[ncol(meanCRData)] = 'seCR'
limits = aes(ymax = meanCR + seCR, ymin=meanCR - seCR)
# create a factor variable
numOrder = factor(meanCRData$cardinality, levels)
# do the plotting
p2 = ggplot(data=meanCRData, aes(x=numOrder, y=meanCR, group=teachModes, colour=teachModes)) +
geom_line(size = 1.25) + geom_point() + ylim(0, 1) +
geom_errorbar(limits, width=0.15) +
theme(legend.position="none") +
labs(x = "Number of items", y = "Mean completion rate")
################################################################################################
# correct complete rate by cardinality
################################################################################################
tempSelectVars <- c('teachModes',"CCR1", "CCR2", "CCR3",'CCR4', 'CCR5', 'CCR6', 'CCR7')
CCRData = mydata[tempSelectVars]
# compute mean by cardinality
meanCCRData = ddply(CCRData,~teachModes,summarise,one=mean(CCR1),two=mean(CCR2),
three=mean(CCR3),four=mean(CCR4),five=mean(CCR5),six=mean(CCR6),seven=mean(CCR7))
seCCRData = ddply(CCRData,~teachModes,summarise,one=se(CCR1),two=se(CCR2),
three=se(CCR3),four=se(CCR4),five=se(CCR5),six=se(CCR6),seven=se(CCR7))
# gather data by cardinality
meanCCRData = gather(meanCCRData, cardinality, meanCCR, one:seven)
seCCRData = gather(seCCRData, cardinality, seCCR, one:seven)
# attach the se to the end of the data frame
meanCCRData <- data.frame(meanCCRData, seCCRData$seCCR)
colnames(meanCCRData)[ncol(meanCCRData)] = 'seCCR'
limits = aes(ymax = meanCCR + seCCR, ymin=meanCCR - seCCR)
# create a factor variable
numOrder = factor(meanStepsData$cardinality, levels)
# do the plotting
p3 = ggplot(data=meanCCRData, aes(x=numOrder, y=meanCCR, group=teachModes, colour=teachModes)) +
geom_line(size = 1.25) + geom_point() + ylim(0, 1) +
geom_errorbar(limits, width=0.15) +
theme_bw() + theme(legend.position="none") +
labs(x = "Number of items", y = "Mean correct completion rate")
################################################################################################
# skip rate by cardinality
################################################################################################
tempSelectVars <- c('teachModes',"SR1", "SR2", "SR3",'SR4', 'SR5', 'SR6', 'SR7')
SRData = mydata[tempSelectVars]
# compute mean by cardinality
meanSRData = ddply(SRData,~teachModes,summarise,one=mean(SR1),two=mean(SR2),
three=mean(SR3),four=mean(SR4),five=mean(SR5),six=mean(SR6),seven=mean(SR7))
seSRData = ddply(SRData,~teachModes,summarise,one=se(SR1),two=se(SR2),
three=se(SR3),four=se(SR4),five=se(SR5),six=se(SR6),seven=se(SR7))
# gather data by cardinality
meanSRData = gather(meanSRData, cardinality, meanSR, one:seven)
seSRData = gather(seSRData, cardinality, seSR, one:seven)
# attach the se to the end of the data frame
meanSRData <- data.frame(meanSRData, seSRData$seSR)
colnames(meanSRData)[ncol(meanSRData)] = 'seSR'
limits = aes(ymax = meanSR + seSR, ymin=meanSR - seSR)
# create a factor variable
numOrder = factor(meanSRData$cardinality, levels)
# do the plotting
p4 = ggplot(data=meanSRData, aes(x=numOrder, y=meanSR, group=teachModes, colour=teachModes)) +
geom_line(size = 1.25) + geom_point() + ylim(0, 1) +
geom_errorbar(limits, width=0.15) +
theme(legend.position="none") +
labs(x = "Number of items", y = "Mean skip rate")
################################################################################################
# stop early rate by cardinality
################################################################################################
tempSelectVars <- c('teachModes',"SER1", "SER2", "SER3",'SER4', 'SER5', 'SER6', 'SER7')
SERData = mydata[tempSelectVars]
# compute mean by cardinality
meanSERData = ddply(SERData,~teachModes,summarise,one=mean(SER1),two=mean(SER2),
three=mean(SER3),four=mean(SER4),five=mean(SER5),six=mean(SER6),seven=mean(SER7))
seSERData = ddply(SERData,~teachModes,summarise,one=se(SER1),two=se(SER2),
three=se(SER3),four=se(SER4),five=se(SER5),six=se(SER6),seven=se(SER7))
# gather data by cardinality
meanSERData = gather(meanSERData, cardinality, meanSER, one:seven)
seSERData = gather(seSERData, cardinality, seSER, one:seven)
# attach the se to the end of the data frame
meanSERData <- data.frame(meanSERData, seSERData$seSER)
colnames(meanSERData)[ncol(meanSERData)] = 'seSER'
limits = aes(ymax = meanSER + seSER, ymin=meanSER - seSER)
# create a factor variable
numOrder = factor(meanSERData$cardinality, levels)
# do the plotting
p5 = ggplot(data=meanSERData, aes(x=numOrder, y=meanSER, group=teachModes, colour=teachModes)) +
geom_line(size = 1.25) + geom_point() + ylim(0, 1) +
geom_errorbar(limits, width=0.15) +
theme(legend.position="none") +
labs(x = "Number of items", y = "Mean stop early rate")
################################################################################################
# mean number of double touching by cardinality
################################################################################################
tempSelectVars <- c('teachModes',"DT1", "DT2", "DT3",'DT4', 'DT5', 'DT6', 'DT7')
DTData = mydata[tempSelectVars]
# compute mean by cardinality
meanDTData = ddply(DTData,~teachModes,summarise,one=mean(DT1),two=mean(DT2),
three=mean(DT3),four=mean(DT4),five=mean(DT5),six=mean(DT6),seven=mean(DT7))
seDTData = ddply(DTData,~teachModes,summarise,one=se(DT1),two=se(DT2),
three=se(DT3),four=se(DT4),five=se(DT5),six=se(DT6),seven=se(DT7))
# gather data by cardinality
meanDTData = gather(meanDTData, cardinality, meanDT, one:seven)
seDTData = gather(seDTData, cardinality, seDT, one:seven)
# attach the se to the end of the data frame
meanDTData <- data.frame(meanDTData, seDTData$seDT)
colnames(meanDTData)[ncol(meanDTData)] = 'seDT'
limits = aes(ymax = meanDT + seDT, ymin=meanDT - seDT)
# create a factor variable
numOrder = factor(meanDTData$cardinality, levels)
# do the plotting
p6 = ggplot(data=meanDTData, aes(x=numOrder, y=meanDT, group=teachModes, colour=teachModes)) +
geom_line(size = 1.25) + geom_point() + ylim(0, ceiling(max(meanDTData$meanDT + meanDTData$seDT))) +
geom_errorbar(limits, width=0.15) +
theme(legend.position="none") +
labs(x = "Number of items", y = "Mean number of double touches")
# plot them all
# multiplot(p1, p2, p3, p4, p5, p6, cols=2)
# multiplot(p4, p5, p6, cols=2)
p1
multiplot(p3, p4, p5, p6, cols=2)
rm(list = ls())
library(ggplot2); library(ggdendro); library(ape)
PROJECT_DIR = '/Users/Qihong/Dropbox/github/categorization_PDP'
setwd(PROJECT_DIR)
# you need to enter the file name and folder name here!
DATA_FOLDER = 'sim23.3_noise'
FILENAME = 'hiddenFinal_e4.txt'
# load the data
datapath = paste(PROJECT_DIR, DATA_FOLDER, FILENAME, sep="/")
temp = read.table(datapath)
# set some parameters
n = length(temp)
numPatterns = dim(temp)[1]
# convert the hidden activation to a matrix
hiddenData = as.matrix(temp[1:numPatterns,4:n])
temp = as.vector(temp[1:numPatterns,2])
temp = sapply(strsplit(temp, split='l', fixed=TRUE), function(x) (x[2]))
row.names(hiddenData) = temp
# Analysis for full data (verbal + visual)
# compute the dissimilarity structure
plot.new()
par(mfrow = c(1,1))
distanceMatrix = (as.matrix(dist(hiddenData)))
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# mtext(row.names(hiddenData))
plot.new()
lowerTriangularIndices = lower.tri(distanceMatrix)
range (distanceMatrix[lowerTriangularIndices])
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# hclust
# par(mfrow = c(1,2))
par(mfrow = c(1,1))
plot(hclust(dist(hiddenData)),
main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
xlab = 'instances', ylab = 'distance')
hc <- hclust(dist(hiddenData), "ave")
# ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
# plot(as.phylo(hc), type = "fan", main = 'Hierarchical clustering: hidden layer \nneural representations for all instances')
# load code of A2R function
source("http://addictedtor.free.fr/packages/A2R/lastVersion/R/code.R")
# colored dendrogram
op = par(bg = "#EFEFEF")
A2Rplot(hc, k = 3, boxes = FALSE, col.up = "gray50", col.down = c("#FF6B6B", "#4ECDC4", "#556270"),
main = 'Hierarchical clustering: hidden layer \nneural representations for all instances')
# 2D MDS
hiddenMDS = cmdscale(distanceMatrix)
# check the range
range = max(abs(hiddenMDS));
plot(hiddenMDS,
#      main = 'MDS: hidden layer neural\n representations for all instances',
#      xlab = 'distance', ylab = 'distance',
xlab = '', ylab = '',
type = 'n',
xlim = c(-range,range), ylim = c(-range,range))
text(hiddenMDS,labels = row.names(hiddenData))
par(bg = "white")
rm(list = ls())
library(ggplot2); library(ggdendro); library(ape)
PROJECT_DIR = '/Users/Qihong/Dropbox/github/categorization_PDP'
setwd(PROJECT_DIR)
# you need to enter the file name and folder name here!
DATA_FOLDER = 'sim23.3_noise'
FILENAME = 'hiddenFinal_e4.txt'
# load the data
datapath = paste(PROJECT_DIR, DATA_FOLDER, FILENAME, sep="/")
temp = read.table(datapath)
# set some parameters
n = length(temp)
numPatterns = dim(temp)[1]
# convert the hidden activation to a matrix
hiddenData = as.matrix(temp[1:numPatterns,4:n])
temp = as.vector(temp[1:numPatterns,2])
temp = sapply(strsplit(temp, split='l', fixed=TRUE), function(x) (x[2]))
row.names(hiddenData) = temp
# Analysis for full data (verbal + visual)
# compute the dissimilarity structure
plot.new()
par(mfrow = c(1,1))
distanceMatrix = (as.matrix(dist(hiddenData)))
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# mtext(row.names(hiddenData))
plot.new()
lowerTriangularIndices = lower.tri(distanceMatrix)
range (distanceMatrix[lowerTriangularIndices])
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# hclust
# par(mfrow = c(1,2))
par(mfrow = c(1,1))
plot(hclust(dist(hiddenData)),
main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
xlab = 'instances', ylab = 'distance')
hc <- hclust(dist(hiddenData), "ave")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
rm(list = ls())
library(ggplot2); library(ggdendro); library(ape)
install.packages('ggdendro')
rm(list = ls())
library(ggplot2); library(ggdendro); library(ape)
PROJECT_DIR = '/Users/Qihong/Dropbox/github/categorization_PDP'
setwd(PROJECT_DIR)
# you need to enter the file name and folder name here!
DATA_FOLDER = 'sim23.3_noise'
FILENAME = 'hiddenFinal_e4.txt'
# load the data
datapath = paste(PROJECT_DIR, DATA_FOLDER, FILENAME, sep="/")
temp = read.table(datapath)
# set some parameters
n = length(temp)
numPatterns = dim(temp)[1]
# convert the hidden activation to a matrix
hiddenData = as.matrix(temp[1:numPatterns,4:n])
temp = as.vector(temp[1:numPatterns,2])
temp = sapply(strsplit(temp, split='l', fixed=TRUE), function(x) (x[2]))
row.names(hiddenData) = temp
# Analysis for full data (verbal + visual)
# compute the dissimilarity structure
plot.new()
par(mfrow = c(1,1))
distanceMatrix = (as.matrix(dist(hiddenData)))
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# mtext(row.names(hiddenData))
plot.new()
lowerTriangularIndices = lower.tri(distanceMatrix)
range (distanceMatrix[lowerTriangularIndices])
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# hclust
# par(mfrow = c(1,2))
par(mfrow = c(1,1))
plot(hclust(dist(hiddenData)),
main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
xlab = 'instances', ylab = 'distance')
hc <- hclust(dist(hiddenData), "ave")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
plot(as.phylo(hc), type = "fan", main = 'Hierarchical clustering: hidden layer \nneural representations for all instances')
install.packages('ape')
plot(as.phylo(hc), type = "fan", main = 'Hierarchical clustering: hidden layer \nneural representations for all instances')
library(ggplot2); library(ggdendro); library(ape)
rm(list = ls())
library(ggplot2); library(ggdendro); library(ape)
PROJECT_DIR = '/Users/Qihong/Dropbox/github/categorization_PDP'
setwd(PROJECT_DIR)
# you need to enter the file name and folder name here!
DATA_FOLDER = 'sim23.3_noise'
FILENAME = 'hiddenFinal_e4.txt'
# load the data
datapath = paste(PROJECT_DIR, DATA_FOLDER, FILENAME, sep="/")
temp = read.table(datapath)
# set some parameters
n = length(temp)
numPatterns = dim(temp)[1]
# convert the hidden activation to a matrix
hiddenData = as.matrix(temp[1:numPatterns,4:n])
temp = as.vector(temp[1:numPatterns,2])
temp = sapply(strsplit(temp, split='l', fixed=TRUE), function(x) (x[2]))
row.names(hiddenData) = temp
# Analysis for full data (verbal + visual)
# compute the dissimilarity structure
plot.new()
par(mfrow = c(1,1))
distanceMatrix = (as.matrix(dist(hiddenData)))
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# mtext(row.names(hiddenData))
plot.new()
lowerTriangularIndices = lower.tri(distanceMatrix)
range (distanceMatrix[lowerTriangularIndices])
image(distanceMatrix[numPatterns:1,], zlim = c(0,5.5),
col = heat.colors(10, 1), yaxt = "n", xaxt = "n")
# hclust
# par(mfrow = c(1,2))
par(mfrow = c(1,1))
plot(hclust(dist(hiddenData)),
main = 'Hierarchical clustering: hidden layer \nneural representations for all instances',
xlab = 'instances', ylab = 'distance')
hc <- hclust(dist(hiddenData), "ave")
ggdendrogram(hc, rotate = FALSE, size = 2) + ggtitle("Hierarchical clustering: hidden layer \nneural representations for all instances")
plot(as.phylo(hc), type = "fan", main = 'Hierarchical clustering: hidden layer \nneural representations for all instances')
# load code of A2R function
source("http://addictedtor.free.fr/packages/A2R/lastVersion/R/code.R")
# colored dendrogram
op = par(bg = "#EFEFEF")
